#!/bin/bash

# ToDo: This only works on Avnet Gateway -- add checks for HW

if [[ $EUID -ne 0 ]]; then
  echo "This script must be run as root"
  exit 1
fi

if ! curl -s -I https://avnet.iotconnect.io. -o /dev/null; then
    echo "Must have Internet connectivity to install."
    exit 1
fi

# Update dependencies
add_pkg="hostapd dnsmasq dnsutils pydb anacron busybox git libusb-dev nmap udhcpc jq"
remove_pkg="apache2"

files_for_copy=(
    "dhcpcd.conf* /etc/" \
    "sudoers /etc/" \
    "profile /etc/" \
    "dnsmasq.conf* /etc/" \
    "default.script /usr/share/udhcpc/" \
    "hostapd* /etc/default/" \
    "hostapd* /etc/hostapd/" \
    "*.service /etc/systemd/system/" \
    "rsyslog.conf /etc/" \
    "logrotate.conf /etc/" \
    "ignore-*.conf /etc/rsyslog.d/" \
    "99-attiny.rules /etc/udev/rules.d/" \
    "rsyslog /etc/logrotate.d/" \
    "iotconnect /etc/logrotate.d/" \
    "rc.local* /etc/" \
    "default.script /usr/share/udhcpc/" \
    "quectel-CM /usr/local/bin/" \
    "quectel.service /etc/systemd/system/"\
    "quectel.service /opt/avnet-iot/services/"\
    "kernel7.img /boot/" \
    "zImage /boot/" \
    "config.txt /boot/" \
    "interfaces /etc/network/" \
    "tpm_device_provision /opt/avnet-iot/iotservices/"\
    "tpm_device_provision /usr/bin/"\
    "ImageDate.txt /opt/avnet-iot/IoTConnect/" \
    "SDKVersion.txt /opt/avnet-iot/IoTConnect/" \
    "IoTConnectSDK.py /usr/local/lib/python2.7/dist-packages/iotconnect_sdk-2.1.1-py2.7.egg/iotconnect/" \
    "shutdown-gpio /lib/systemd/system-shutdown/"
)

files_for_removal=(
    "/etc/systemd/system/quectel-service.sh" \
    "/opt/avnet-iot/utilities/github" \
)

scriptdir="$(dirname $(realpath $0))"

apt_upgrade ()
{
    title "apt upgrade"
    apt-mark hold raspberrypi-bootloader
    apt-mark hold raspberrypi-kernel
    apt-mark hold raspberrypi-sys-mods
    apt-get -q purge -y 'php*'
    apt-get -q purge -y 'apache*'
    apt-get -q autoremove -y
    apt-get -qq update
    apt-get -qq upgrade -y
}

deps_install ()
{
    title "deps install"
    apt-get -qq update -y
    apt-get -q remove -y $remove_pkg
    apt-get -q install -y $add_pkg
}

copy_files ()
(
    title "Copy files"
    cd "$scriptdir/files"

    chown root:root *
    mkdir -p /usr/share/udhcpc
    for i in "${files_for_copy[@]}"
    do
        cp -aRfv ${i}
    done
)

remove_files ()
{
    title "Remove files"
    for i in "${files_for_removal[@]}"
    do
        [[ -e ${i} ]] && { rm -R ${i}; }
    done
    rm -Rf /home/avnet/.local/
}

extract_files ()
(
    title "Extract files"
    cd "$scriptdir"
    rm -R /opt/avnet-iot/IoTConnect/sample/*
    mkdir -p /opt/avnet-iot
    cp -R avnet-iot-1.2/* /opt/avnet-iot
    cp -R ble5/opt/avnet-iot/* /opt/avnet-iot
    cp ble5/opt/avnet-iot/iotservices/files/ble5lr.service /etc/systemd/system/
)

python_updates ()
(
    title "Python updates"
    cd "$scriptdir/pip"

    set -x
    pip uninstall -q -y iotconnect-sdk-py2.7
    pip uninstall -q -y iotconnect-sdk
    pip install -q pyudev==0.21.0
    pip install -q minimalmodbus
    pip install -q ntplib
    pip install -q usbinfo
    pip install -q psutil
    pip install -q bluepy
    setcap 'cap_net_raw,cap_net_admin+eip' /usr/local/lib/python2.7/dist-packages/bluepy/bluepy-helper
    pip install -q python-can==2.0.0
    pip install -q configparser
    pip install -q pycurl

    apt-get -q install -y python3-pip
    pip3 install -q pyudev==0.21.0
    pip3 install -q minimalmodbus
    pip3 install -q ntplib
    pip3 install -q usbinfo
    pip3 install -q psutil
    pip3 install -q bluepy
    setcap 'cap_net_raw,cap_net_admin+eip' /usr/local/lib/python3.5/dist-packages/bluepy/bluepy-helper
    pip3 install -q python-can==2.0.0
    pip3 install -q configparser
    pip3 install -q pycurl
    pip3 install -q bottle
    pip3 install -q azure-iot-provisioning-device-client
    pip3 install -q azure-iothub-device-client
    # make python 3.5 default
    #update-alternatives --install /usr/bin/python python  /usr/bin/python2.7 1
    #update-alternatives --install /usr/bin/python python  /usr/bin/python3.5 2
   
    cd "$scriptdir"/pip/iotconnect-sdk-2.1.1
    sudo -E python setup.py install
    sudo -E python3 setup.py install
    set +x
)

install_drivers ()
(
    title "Install drivers"
    cd "$scriptdir/kernel"

    cp -R lib/* /lib
)

install_node_red()
{
    title "Install node-red"
    apt purge -y nodejs
    rm -rf /home/avnet/.node-red
    rm -rf /usr/lib/node_modules

    curl -sL https://deb.nodesource.com/setup_12.x | sudo -E bash -
    apt-get -q install -y nodejs
    npm install -g --progress false --unsafe-perm node-red
    npm install -g --progress false node-gyp

    npm install -g --progress false --unsafe-perm node-red-node-serialport
    npm install -g --progress false node-red-contrib-configurable-interval
    npm install -g --progress false $(npm pack "$scriptdir"/node-red/iotconnect-sdk-tpm | tail -1)
    npm install -g --progress false $(npm pack "$scriptdir"/node-red/node-red-contrib-iotconnect | tail -1)
}

create_avnet_user ()
{
    title "Create avnet user"
    if [ ! -d /home/avnet ]; then
        deluser avnet
        useradd -m -d /home/avnet -g avnet -G root,staff,crontab,adm,tty,dialout,sudo,ssh,iotedge,tss,gpio,i2c -s /bin/bash avnet
	usermod -a -G dialout root
        cat /opt/avnet-iot/iotservices/default.txt | chpasswd
    else
	usermod -a -G dialout root
        usermod -a -G staff,crontab,netdev avnet
        usermod -g avnet avnet
    fi
    chgrp avnet /opt/avnet-iot/IoTConnect/sample
    chmod g+w /opt/avnet-iot/IoTConnect/sample
}

create_fixed_file_log_size ()
{
    title "Create fixed size logging filesystem"
    local size="$1"
    local file="$2"

    [[ -z $size ]] && { size="100"; }
    [[ -z $file ]] && { file="/logs.img"; }

    local fstab="$file       /var/log        ext4    loop                       0       0"

    if [[ ! -f $file ]]; then
        echo "Reserving $size MB for logging: $file"
        systemctl stop syslog.socket rsyslog.service
        rm -rf /var/log/*
        dd if=/dev/zero of=$file bs=1M count=$size > /dev/null
        mkfs -t ext4 /logs.img > /dev/null
    fi

    if ! grep -Eq "/var/log" /etc/fstab; then
        echo "$fstab" >> /etc/fstab
    fi
}

enable_wifi_ap_mode ()
{
    title "Enable WiFi AP mode"
    rm /etc/wpa_supplicant/wpa_supplicant.conf
    cp /etc/default/hostapd.ap /etc/default/hostapd
    cp /etc/dhcpcd.conf.ap /etc/dhcpcd.conf
    cp /etc/dnsmasq.conf.ap /etc/dnsmasq.conf

    ln -s /opt/avnet-iot/services/bootservice.service /etc/systemd/system/bootservice.service
    ln -s /opt/avnet-iot/services/attinyupdate.service /etc/systemd/system/attinyupdate.service

    systemctl disable iotconnectservice
    systemctl stop wpa_supplicant
    systemctl disable wpa_supplicant

    systemctl daemon-reload
    systemctl enable dnsmasq hostapd
    systemctl enable attinyupdate bootservice quectel hwclock-start ledservice restservice buttonservice
}

restore_reboot ()
{
    title "Restore reboot"
    ln -fs /bin/systemctl /sbin/reboot
    rm -f /sbin/rebootorig
    rm -f /opt/avnet-iot/iotservices/reboot
}

save_version ()
{
    title "Saving Version info"
    date > /opt/avnet-iot/IoTConnect/ImageDate.txt
    cd "$scriptdir"
    (git describe --always || echo "Not installed from git") > /opt/avnet-iot/git-version
}

title ()
{
    echo -ne "\e]0;$*\a"
}

systemctl stop ledservice
systemctl stop buttonservice
systemctl stop restservice
systemctl stop iotconnectservice
systemctl disable iotconnectservice
systemctl disable ledservice
systemctl disable buttonservice
systemctl disable restservice

pkill startup.sh
pkill python
deps_install
remove_files
extract_files
python_updates
copy_files
install_drivers
create_fixed_file_log_size 100
create_avnet_user
install_node_red
enable_wifi_ap_mode
restore_reboot
apt_upgrade
save_version
systemctl daemon-reload
systemctl enable ble5lr

title "Ready to reboot"
read -p "Installation complete, press ENTER to reboot"

rm -Rf "${scriptdir}"
reboot
